name: Commit Update

on:
  push:
      paths:
          - "docs/data_dictionary/**"

jobs:
    build:
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, 'Skip')"
        permissions:
            # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.||
            contents: write

        defaults:
            run:
                working-directory: docs/data_dictionary

        steps:
            - name: Check out repository
              uses: actions/checkout@v4
              with:
                token: ${{ secrets.PAT }}

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: 3.11

            - name: Create changes
              run: |
                  echo "From commit workflow" >> commitmessage.txt
                  git status

            # - name: Commit changes
            #   uses: stefanzweifel/git-auto-commit-action@v5
            #   with:
            #       commit_message: Test commit

    # trigger_test_workflow:
    #     needs: build
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Invoke workflow without inputs
    #           uses: benc-uk/workflow-dispatch@v1
    #           with:
    #             workflow: generic-api.yml
    #             token: ${{ secrets.PAT }}
    #             ref: ${{ github.ref }}
            # - name: Checkout repository
            #   uses: actions/checkout@v4

            # - name: Run generic API workflow
            #   run: |
            #     gh workflow run generic-api.yml
            #   env:
            #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # trigger_test_workflow:
    #     runs-on: ubuntu-latest
    #     needs: build
    #     steps:
    #     - name: Trigger Test Workflow
    #       uses: actions/github-script@v7
    #       with:
    #         github-token: ${{ secrets.GITHUB_TOKEN }}
    #         script: |
    #             const { data: workflows } = await github.actions.listRepoWorkflows({
    #                 owner: context.repo.owner,
    #                 repo: context.repo.repo
    #             });

    #             const testWorkflow = workflows.workflows.find(w => w.name === 'Z-Api Unit Test Checks');

    #             if (testWorkflow) {
    #                 const { data: workflowRun } = await github.actions.createWorkflowDispatch({
    #                 owner: context.repo.owner,
    #                 repo: context.repo.repo,
    #                 workflow_id: testWorkflow.id
    #             });

    #                 console.log(`Test workflow run triggered: ${workflowRun.html_url}`);
    #             } else {
    #                 console.error('Test workflow not found');
    #             }
